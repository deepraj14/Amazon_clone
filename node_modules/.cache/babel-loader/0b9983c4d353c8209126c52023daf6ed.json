{"ast":null,"code":"import Product from \"./Product\";\nexport const initialState = {\n  basket: [],\n  user: null\n}; //this is a selector and its a good practice to have selectors\n\nexport const getBasketTotal = basket => basket === null || basket === void 0 ? void 0 : basket.reduce((amount, item) => item.price + amount, 0); //we can change this order of item and amoutn,here item.price is appending in item each time\n\nconst reducer = (state, action) => {\n  console.log(action);\n\n  switch (action.type) {\n    case \"ADD_TO_BASKET\":\n      return { ...state,\n        basket: [...state.basket, action.item]\n      };\n\n    case \"REMOVE_FROM_BASKET\":\n      const index = state.basket.findIndex(x => {\n        return x.id === action.id;\n      });\n      const newbasket = { ...state.basket\n      };\n\n      if (index >= 0) {\n        newbasket.splice(index, 1);\n      } else {\n        console.warn(\"No item with id\", action.id, \"exits\");\n      }\n\n      return { ...state,\n        basket: {\n          newbasket\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/amazon_clone/src/reducer.js"],"names":["Product","initialState","basket","user","getBasketTotal","reduce","amount","item","price","reducer","state","action","console","log","type","index","findIndex","x","id","newbasket","splice","warn"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,OAAO,MAAMC,YAAY,GAAC;AACtBC,EAAAA,MAAM,EAAC,EADe;AAEtBC,EAAAA,IAAI,EAAC;AAFiB,CAAnB,C,CAMP;;AACA,OAAO,MAAMC,cAAc,GAAIF,MAAD,IAC5BA,MAD4B,aAC5BA,MAD4B,uBAC5BA,MAAM,CAAEG,MAAR,CAAe,CAACC,MAAD,EAASC,IAAT,KAAkBA,IAAI,CAACC,KAAL,GAAaF,MAA9C,EAAsD,CAAtD,CADK,C,CAOP;;AACE,MAAMG,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,UAAQA,MAAM,CAACG,IAAf;AACE,SAAK,eAAL;AACE,aAAO,EACL,GAAGJ,KADE;AAELR,QAAAA,MAAM,EAAE,CAAC,GAAGQ,KAAK,CAACR,MAAV,EAAkBS,MAAM,CAACJ,IAAzB;AAFH,OAAP;;AAKF,SAAK,oBAAL;AACE,YAAMQ,KAAK,GAACL,KAAK,CAACR,MAAN,CAAac,SAAb,CAAwBC,CAAD,IAAK;AACtC,eAAOA,CAAC,CAACC,EAAF,KAAOP,MAAM,CAACO,EAArB;AACD,OAFW,CAAZ;AAIA,YAAMC,SAAS,GAAC,EAAC,GAAGT,KAAK,CAACR;AAAV,OAAhB;;AACA,UAAGa,KAAK,IAAE,CAAV,EACA;AACAI,QAAAA,SAAS,CAACC,MAAV,CAAiBL,KAAjB,EAAuB,CAAvB;AACC,OAHD,MAKA;AACEH,QAAAA,OAAO,CAACS,IAAR,CAAa,iBAAb,EAA+BV,MAAM,CAACO,EAAtC,EAAyC,OAAzC;AACD;;AAED,aAAO,EAAC,GAAGR,KAAJ;AAAUR,QAAAA,MAAM,EAAC;AAACiB,UAAAA;AAAD;AAAjB,OAAP;;AAGF;AACE,aAAOT,KAAP;AA1BJ;AA+BD,CAjCD;;AAkCF,eAAeD,OAAf","sourcesContent":["import Product from \"./Product\";\r\nexport const initialState={\r\n    basket:[],\r\n    user:null\r\n}\r\n\r\n\r\n//this is a selector and its a good practice to have selectors\r\nexport const getBasketTotal = (basket) => \r\n  basket?.reduce((amount, item) => item.price + amount, 0);\r\n\r\n\r\n \r\n\r\n\r\n//we can change this order of item and amoutn,here item.price is appending in item each time\r\n  const reducer = (state, action) => {\r\n    console.log(action);\r\n    switch (action.type) {\r\n      case \"ADD_TO_BASKET\":\r\n        return {\r\n          ...state,\r\n          basket: [...state.basket, action.item],\r\n        };\r\n      \r\n      case \"REMOVE_FROM_BASKET\":\r\n        const index=state.basket.findIndex((x)=>{\r\n          return x.id===action.id;\r\n        })\r\n\r\n        const newbasket={...state.basket};\r\n        if(index>=0)\r\n        {\r\n        newbasket.splice(index,1);\r\n        }\r\n        else\r\n        {\r\n          console.warn(\"No item with id\",action.id,\"exits\");\r\n        }\r\n\r\n        return {...state,basket:{newbasket}}\r\n        ;\r\n\r\n      default:\r\n        return state;\r\n\r\n\r\n    }\r\n\r\n  };\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}