{"ast":null,"code":"import Product from \"./Product\";\nexport const initialState = {\n  basket: [],\n  user: null\n}; //this is a selector and its a good practice to have selectors\n\nexport const getBasketTotal = basket => basket === null || basket === void 0 ? void 0 : basket.reduce((amount, item) => item.price + amount, 0); //we can change this order of item and amoutn,here item.price is appending in item each time\n\nconst reducer = (state, action) => {\n  console.log(action);\n\n  switch (action.type) {\n    case \"ADD_TO_BASKET\":\n      return { ...state,\n        basket: [...state.basket, action.item]\n      };\n\n    case \"REMOVE_FROM_BASKET\":\n      const index = state.basket.findIndex(basketItem => basketItem.id === action.id);\n      let newBasket = [...state.basket];\n\n      if (index >= 0) {\n        newBasket.splice(index, 1);\n      } else {\n        console.warn(`Cant remove product (id: ${action.id}) as its not in basket!`);\n      }\n\n      return { ...state,\n        basket: newBasket\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/amazon_clone/src/reducer.js"],"names":["Product","initialState","basket","user","getBasketTotal","reduce","amount","item","price","reducer","state","action","console","log","type","index","findIndex","basketItem","id","newBasket","splice","warn"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,OAAO,MAAMC,YAAY,GAAC;AACtBC,EAAAA,MAAM,EAAC,EADe;AAEtBC,EAAAA,IAAI,EAAC;AAFiB,CAAnB,C,CAMP;;AACA,OAAO,MAAMC,cAAc,GAAIF,MAAD,IAC5BA,MAD4B,aAC5BA,MAD4B,uBAC5BA,MAAM,CAAEG,MAAR,CAAe,CAACC,MAAD,EAASC,IAAT,KAAkBA,IAAI,CAACC,KAAL,GAAaF,MAA9C,EAAsD,CAAtD,CADK,C,CAOP;;AACE,MAAMG,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,UAAQA,MAAM,CAACG,IAAf;AACE,SAAK,eAAL;AACE,aAAO,EACL,GAAGJ,KADE;AAELR,QAAAA,MAAM,EAAE,CAAC,GAAGQ,KAAK,CAACR,MAAV,EAAkBS,MAAM,CAACJ,IAAzB;AAFH,OAAP;;AAKA,SAAK,oBAAL;AACE,YAAMQ,KAAK,GAAGL,KAAK,CAACR,MAAN,CAAac,SAAb,CACXC,UAAD,IAAgBA,UAAU,CAACC,EAAX,KAAkBP,MAAM,CAACO,EAD7B,CAAd;AAGA,UAAIC,SAAS,GAAG,CAAC,GAAGT,KAAK,CAACR,MAAV,CAAhB;;AAEA,UAAIa,KAAK,IAAI,CAAb,EAAgB;AACdI,QAAAA,SAAS,CAACC,MAAV,CAAiBL,KAAjB,EAAwB,CAAxB;AAED,OAHD,MAGO;AACLH,QAAAA,OAAO,CAACS,IAAR,CACG,4BAA2BV,MAAM,CAACO,EAAG,yBADxC;AAGD;;AAED,aAAO,EACL,GAAGR,KADE;AAELR,QAAAA,MAAM,EAAEiB;AAFH,OAAP;;AAKJ;AACE,aAAOT,KAAP;AA5BJ;AAiCD,CAnCD;;AAoCF,eAAeD,OAAf","sourcesContent":["import Product from \"./Product\";\r\nexport const initialState={\r\n    basket:[],\r\n    user:null\r\n}\r\n\r\n\r\n//this is a selector and its a good practice to have selectors\r\nexport const getBasketTotal = (basket) => \r\n  basket?.reduce((amount, item) => item.price + amount, 0);\r\n\r\n\r\n \r\n\r\n\r\n//we can change this order of item and amoutn,here item.price is appending in item each time\r\n  const reducer = (state, action) => {\r\n    console.log(action);\r\n    switch (action.type) {\r\n      case \"ADD_TO_BASKET\":\r\n        return {\r\n          ...state,\r\n          basket: [...state.basket, action.item],\r\n        };\r\n      \r\n        case \"REMOVE_FROM_BASKET\":\r\n          const index = state.basket.findIndex(\r\n            (basketItem) => basketItem.id === action.id\r\n          );\r\n          let newBasket = [...state.basket];\r\n    \r\n          if (index >= 0) {\r\n            newBasket.splice(index, 1);\r\n    \r\n          } else {\r\n            console.warn(\r\n              `Cant remove product (id: ${action.id}) as its not in basket!`\r\n            )\r\n          }\r\n    \r\n          return {\r\n            ...state,\r\n            basket: newBasket\r\n          }\r\n\r\n      default:\r\n        return state;\r\n\r\n\r\n    }\r\n\r\n  };\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}